// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/scylladb/mermaid/scyllaclient/internal/agent/models"
)

// NodeInfoReader is a Reader for the NodeInfo structure.
type NodeInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NodeInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNodeInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewNodeInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNodeInfoOK creates a NodeInfoOK with default headers values
func NewNodeInfoOK() *NodeInfoOK {
	return &NodeInfoOK{}
}

/*NodeInfoOK handles this case with default header values.

node information
*/
type NodeInfoOK struct {
	Payload *models.NodeInfo
}

func (o *NodeInfoOK) Error() string {
	return fmt.Sprintf("[GET /node_info][%d] nodeInfoOK  %+v", 200, o.Payload)
}

func (o *NodeInfoOK) GetPayload() *models.NodeInfo {
	return o.Payload
}

func (o *NodeInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NodeInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeInfoInternalServerError creates a NodeInfoInternalServerError with default headers values
func NewNodeInfoInternalServerError() *NodeInfoInternalServerError {
	return &NodeInfoInternalServerError{}
}

/*NodeInfoInternalServerError handles this case with default header values.

Server error
*/
type NodeInfoInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *NodeInfoInternalServerError) Error() string {
	return fmt.Sprintf("[GET /node_info][%d] nodeInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *NodeInfoInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
