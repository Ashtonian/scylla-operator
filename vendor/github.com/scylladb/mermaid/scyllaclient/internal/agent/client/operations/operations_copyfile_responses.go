// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/scylladb/mermaid/scyllaclient/internal/agent/models"
)

// OperationsCopyfileReader is a Reader for the OperationsCopyfile structure.
type OperationsCopyfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OperationsCopyfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOperationsCopyfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewOperationsCopyfileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOperationsCopyfileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOperationsCopyfileOK creates a OperationsCopyfileOK with default headers values
func NewOperationsCopyfileOK() *OperationsCopyfileOK {
	return &OperationsCopyfileOK{}
}

/*OperationsCopyfileOK handles this case with default header values.

Job
*/
type OperationsCopyfileOK struct {
	Payload *models.Jobid
}

func (o *OperationsCopyfileOK) Error() string {
	return fmt.Sprintf("[POST /rclone/operations/copyfile][%d] operationsCopyfileOK  %+v", 200, o.Payload)
}

func (o *OperationsCopyfileOK) GetPayload() *models.Jobid {
	return o.Payload
}

func (o *OperationsCopyfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Jobid)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOperationsCopyfileNotFound creates a OperationsCopyfileNotFound with default headers values
func NewOperationsCopyfileNotFound() *OperationsCopyfileNotFound {
	return &OperationsCopyfileNotFound{}
}

/*OperationsCopyfileNotFound handles this case with default header values.

Not found
*/
type OperationsCopyfileNotFound struct {
	Payload *models.ErrorResponse
}

func (o *OperationsCopyfileNotFound) Error() string {
	return fmt.Sprintf("[POST /rclone/operations/copyfile][%d] operationsCopyfileNotFound  %+v", 404, o.Payload)
}

func (o *OperationsCopyfileNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *OperationsCopyfileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOperationsCopyfileInternalServerError creates a OperationsCopyfileInternalServerError with default headers values
func NewOperationsCopyfileInternalServerError() *OperationsCopyfileInternalServerError {
	return &OperationsCopyfileInternalServerError{}
}

/*OperationsCopyfileInternalServerError handles this case with default header values.

Server error
*/
type OperationsCopyfileInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *OperationsCopyfileInternalServerError) Error() string {
	return fmt.Sprintf("[POST /rclone/operations/copyfile][%d] operationsCopyfileInternalServerError  %+v", 500, o.Payload)
}

func (o *OperationsCopyfileInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *OperationsCopyfileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
